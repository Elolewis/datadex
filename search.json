[
  {
    "objectID": "notebooks/2023-05-06-quarto.html",
    "href": "notebooks/2023-05-06-quarto.html",
    "title": "Quarto Notebooks",
    "section": "",
    "text": "This document contains a few examples of how to do things in Quarto‚Äôs world. All is coming from a Jupyter Notebook fully integrated with Datadex!\nWe can display dataframes as tables:\n\n\nCode\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\ntable = [\n    [\"Sun\", 696000, 1989100000],\n    [\"Earth\", 6371, 5973.6],\n    [\"Moon\", 1737, 73.5],\n    [\"Mars\", 3390, 641.85],\n]\nMarkdown(tabulate(table, headers=[\"Planet\", \"R (km)\", \"mass (x 10^29 kg)\"]))\n\n\n\n\nTable¬†1: Planets\n\n\nPlanet\nR (km)\nmass (x 10^29 kg)\n\n\n\n\nSun\n696000\n1.9891e+09\n\n\nEarth\n6371\n5973.6\n\n\nMoon\n1737\n73.5\n\n\nMars\n3390\n641.85\n\n\n\n\n\n\nWe can do basic plots:\n\n\nCode\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 23, 2, 4])\nplt.show()\n\nplt.plot([8, 65, 23, 90])\nplt.show()\n\n\n\n\n\n\n\n\n(a) First\n\n\n\n\n\n\n\n(b) Second\n\n\n\n\nFigure¬†1: Charts\n\n\n\nBut also dynamic graphs:\n\n\nCode\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nalt.themes.enable(\"vox\")\n\nnp.random.seed(42)\nsource = pd.DataFrame(\n    np.cumsum(np.random.randn(100, 3), 0).round(2),\n    columns=[\"A\", \"B\", \"C\"],\n    index=pd.RangeIndex(100, name=\"x\"),\n)\nsource = source.reset_index().melt(\"x\", var_name=\"category\", value_name=\"y\")\n\n# Create a selection that chooses the nearest point & selects based on x-value\nnearest = alt.selection_point(nearest=True, on=\"mouseover\", fields=[\"x\"], empty=False)\n\n# The basic line\nline = (\n    alt.Chart(source)\n    .mark_line(interpolate=\"basis\")\n    .encode(x=\"x:Q\", y=\"y:Q\", color=\"category:N\")\n)\n\n# Transparent selectors across the chart. This is what tells us\n# the x-value of the cursor\nselectors = (\n    alt.Chart(source)\n    .mark_point()\n    .encode(\n        x=\"x:Q\",\n        opacity=alt.value(0),\n    )\n    .add_params(nearest)\n)\n\n# Draw points on the line, and highlight based on selection\npoints = line.mark_point().encode(\n    opacity=alt.condition(nearest, alt.value(1), alt.value(0))\n)\n\n# Draw text labels near the points, and highlight based on selection\ntext = line.mark_text(align=\"left\", dx=5, dy=-5).encode(\n    text=alt.condition(nearest, \"y:Q\", alt.value(\" \"))\n)\n\n# Draw a rule at the location of the selection\nrules = (\n    alt.Chart(source)\n    .mark_rule(color=\"gray\")\n    .encode(\n        x=\"x:Q\",\n    )\n    .transform_filter(nearest)\n)\n\n# Put the five layers into a chart and bind the data\nalt.layer(line, selectors, points, rules, text).properties(\n    width=\"container\", height=400\n)\n\n\n\n\n\n\n\n\nAnd even access our dbt models living int the local DuckDB database:\n\n\nCode\nimport duckdb\nimport os\n\nDATA_DIR = os.getenv(\"DATA_DIR\")\n\ncon = duckdb.connect(database=DATA_DIR + \"/local.duckdb\", read_only=True)\n\ndf = con.sql(\"from climate_co2_global_trend\").df()\n\nc = (\n    alt.Chart(df)\n    .mark_line()\n    .encode(\n        x=alt.X(\"date:T\", title=\"Date\"),\n        y=alt.Y(\"trend:Q\", scale=alt.Scale(domain=[390, 430]), title=\"CO2 (ppm)\"),\n        tooltip=[\n            alt.Tooltip(\"date:T\", title=\"Date\"),\n            alt.Tooltip(\"trend:Q\", title=\"CO2 (ppm)\"),\n        ],\n    )\n    .properties(width=\"container\", height=400)\n)\n\nc.display()"
  },
  {
    "objectID": "notebooks/2023-05-15-pyscript.html",
    "href": "notebooks/2023-05-15-pyscript.html",
    "title": "PyScript",
    "section": "",
    "text": "[splashscreen]\n        enabled = false\nSo‚Ä¶ this is the current date and time, computed by Python running in your browser!\nfrom datetime import datetime; now = datetime.now(); display(now.strftime(\"%m/%d/%Y, %H:%M:%S\"));"
  },
  {
    "objectID": "notebooks/2023-05-15-pyscript.html#jupyter-repl",
    "href": "notebooks/2023-05-15-pyscript.html#jupyter-repl",
    "title": "PyScript",
    "section": "Jupyter REPL",
    "text": "Jupyter REPL\nYou can also have an entire Jupyter REPL running in your browser, with the ability to run arbitrary Python code!\nGo ahead and try this out:\nfrom matplotlib import pyplot as plt\nimport numpy as np\nx, y, scale = np.random.randn(3, 100)\nfig, ax = plt.subplots()\nax.scatter(x=x, y=y, c=scale, s=np.abs(scale) * 500)\nax.set(title=\"Some random data!\")\nplt.show()"
  },
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "\nD A T A D E X\n",
    "section": "",
    "text": "Collaborate on Open Data using Open Source Tools\nDatadex is a platform where people collaborate on Open Data using modern and open source tools and frameworks."
  },
  {
    "objectID": "README.html#setup",
    "href": "README.html#setup",
    "title": "\nD A T A D E X\n",
    "section": "‚öôÔ∏è Setup",
    "text": "‚öôÔ∏è Setup\nThe fastest way to start using Datadex is via VSCode Remote Containers. Once inside the develpment environment, you‚Äôll only need to run make deps.\n\n\n\n\n\nPS: The development environment can also run in your browser thanks to GitHub Codespaces!"
  },
  {
    "objectID": "README.html#motivation",
    "href": "README.html#motivation",
    "title": "\nD A T A D E X\n",
    "section": "üéØ Motivation",
    "text": "üéØ Motivation\nThis small project was created after thinking how an Open Data Protocol could look like!"
  },
  {
    "objectID": "README.html#acknowledgements",
    "href": "README.html#acknowledgements",
    "title": "\nD A T A D E X\n",
    "section": "üëè Acknowledgements",
    "text": "üëè Acknowledgements\n\nThis proof of concept was created thanks to open source projects like DuckDB and dbt.\nDatadex name was inspired by Juan Benet awesome data projects."
  },
  {
    "objectID": "notebooks/2023-02-22-duckdb-ipfs.html",
    "href": "notebooks/2023-02-22-duckdb-ipfs.html",
    "title": "Making DuckDB understand IPFS hashes",
    "section": "",
    "text": "Turns out you can query arbitrary filesystems with SQL. This notebook shows how to query IPFS with DuckDB.\nThe gist of it is that you can register any fsspec filesystem on DuckDB. As IPFS is supported by fsspec via ipfsspec, we can register it and query it with SQL.\nBefore running this code, you‚Äôll need to install ipfsspec. You can do so with:\npip install git+https://github.com/fsspec/ipfsspec\n\nimport duckdb\nfrom ipfsspec import AsyncIPFSFileSystem\n\nipfs_fs = AsyncIPFSFileSystem()\n\nduckdb.register_filesystem(ipfs_fs)\n\nOnce the filesystem is registered, you can use specific URIs inside read_csv_auto or read_parquet!\nA couple of examples:\n\n_ = (\n    duckdb.sql(\n        \"select * from read_csv_auto('ipfs://bafybeif5reawvqtsoybj5fhdl4ghaq3oc7kzepuws26zawkjm4johlv3uq')\"\n    )\n    .df()\n    .groupby(\"kingdom_name\")[\"taxonid\"]\n    .count()\n    .plot.bar()\n)\n\n\n\n\n\n_ = (\n    duckdb.query(\n        \"select * from read_parquet('ipfs://bafkreibnx5q6qwxobozkdm6xt7ktvwciyfvtkgy7fud67w5oyxnf5tch4e') limit 10\"\n    )\n    .df()\n    .groupby(\"year\")\n    .mean(\"literacy_rate\")\n    .plot()\n)"
  },
  {
    "objectID": "notebooks/index.html",
    "href": "notebooks/index.html",
    "title": "Notebooks",
    "section": "",
    "text": "Making DuckDB understand IPFS hashes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nDavid Gasquez\n\n\n\n\n\n\n  \n\n\n\n\nPyScript\n\n\n\n\n\n\n\n\n\n\n\n\nMay 15, 2023\n\n\nDavid Gasquez\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Notebooks\n\n\n\n\n\n\n\n\n\n\n\n\nMay 6, 2023\n\n\nDavid Gasquez\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nD A T A D E X\n",
    "section": "",
    "text": "Collaborate on Open Data using Open Source Tools\nDatadex is a platform where people collaborate on Open Data using modern and open source tools and frameworks."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "\nD A T A D E X\n",
    "section": "‚öôÔ∏è Setup",
    "text": "‚öôÔ∏è Setup\nThe fastest way to start using Datadex is via VSCode Remote Containers. Once inside the develpment environment, you‚Äôll only need to run make deps.\n\n\n\n\n\nPS: The development environment can also run in your browser thanks to GitHub Codespaces!"
  },
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "\nD A T A D E X\n",
    "section": "üéØ Motivation",
    "text": "üéØ Motivation\nThis small project was created after thinking how an Open Data Protocol could look like!"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "\nD A T A D E X\n",
    "section": "üëè Acknowledgements",
    "text": "üëè Acknowledgements\n\nThis proof of concept was created thanks to open source projects like DuckDB and dbt.\nDatadex name was inspired by Juan Benet awesome data projects."
  }
]