[
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "",
    "text": "Collaborate on Open Data using modern tools like dbt and DuckDB"
  },
  {
    "objectID": "README.html#what-is-datadex",
    "href": "README.html#what-is-datadex",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "🤔 What is Datadex?",
    "text": "🤔 What is Datadex?\n\n\n\n\n\nDatadex is a set of tools and frameworks that allow everyone to collaborate on Open Data using principles from the Modern/Open Data Stack. With the help of tools like dbt and DuckDB you can transform data by writing select statements.\n\n💡 Features\n\nOpen: Play well with the rest of the ecosystem.\nModular: Each tool can be replaced and extended (adapters). Works well in many environments.\nFlexible. Run it from your laptop, in a cluster, or from the browser.\nData as Code. Version your data as code thanks to dbt! Publish and share your models for other people to build on top of them. Data, reproducible and accessible!\nModern: Supports types, tests, materialized views, and more. Don’t build new tools to work with Open Data, build bridges with the existing ones."
  },
  {
    "objectID": "README.html#usage",
    "href": "README.html#usage",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "💻 Usage",
    "text": "💻 Usage\nThis is an example of how you can use Datadex to model data. Is already configured with some sample datasets. Get things working end to end with the following steps:\n\nSetup dependencies with make deps.\nBuild your dbt models and save them to Parquet files with make run.\nExplore the data with make rill."
  },
  {
    "objectID": "README.html#what-can-you-do-with-datadex",
    "href": "README.html#what-can-you-do-with-datadex",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "🚀 What can you do with Datadex?",
    "text": "🚀 What can you do with Datadex?\n\nModel local and remote datasets with dbt.\nUse any of the other awesome dbt features like tests and docs. Docs are automatically generated and published on GitHub Pages."
  },
  {
    "objectID": "README.html#setup",
    "href": "README.html#setup",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "⚙️ Setup",
    "text": "⚙️ Setup\nThe fastest way to start using Datadex is via VSCode Remote Containers. Once inside the develpment environment, you’ll only need to run make deps.\n\n\n\n\n\nPS: The development environment can also run in your browser thanks to GitHub Codespaces."
  },
  {
    "objectID": "README.html#motivation",
    "href": "README.html#motivation",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "🎯 Motivation",
    "text": "🎯 Motivation\nThis small project was created after thinking how an Open Data Protocol could look like! I just wanted to stitch together a few open source technologies and see what could they do."
  },
  {
    "objectID": "README.html#acknowledgements",
    "href": "README.html#acknowledgements",
    "title": "\n𝐃 𝐀 𝐓 𝐀 𝐃 𝐄 𝐗\n",
    "section": "👏 Acknowledgements",
    "text": "👏 Acknowledgements\n\nThis proof of concept was created thanks to open source projects like DuckDB and dbt.\nDatadex name was inspired by Juan Benet awesome data projects."
  },
  {
    "objectID": "notebooks/pyscript.html",
    "href": "notebooks/pyscript.html",
    "title": "PyScript",
    "section": "",
    "text": "[splashscreen]\n        enabled = false\nSo… this is the current date and time, computed by Python running in your browser!\nfrom datetime import datetime; now = datetime.now(); display(now.strftime(\"%m/%d/%Y, %H:%M:%S\"));"
  },
  {
    "objectID": "notebooks/pyscript.html#jupyter-repl",
    "href": "notebooks/pyscript.html#jupyter-repl",
    "title": "PyScript",
    "section": "Jupyter REPL",
    "text": "Jupyter REPL\nYou can also have an entire Jupyter REPL running in your browser, with the ability to run arbitrary Python code!\nGo ahead and try this out:\nfrom matplotlib import pyplot as plt\nimport numpy as np\nx, y, scale = np.random.randn(3, 100)\nfig, ax = plt.subplots()\nax.scatter(x=x, y=y, c=scale, s=np.abs(scale) * 500)\nax.set(title=\"Some random data!\")\nplt.show()"
  },
  {
    "objectID": "notebooks/climate.html",
    "href": "notebooks/climate.html",
    "title": "Climate",
    "section": "",
    "text": "Evolution of the CO2 concentration in the atmosphere.\n\n\nCode\nimport pandas as pd\nimport altair as alt\n\ndf = pd.read_parquet(\"../data/climate_co2_global_trend.parquet\")\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\n\n# Altair interactive line plot\n\nc = (\n    alt.Chart(df)\n    .mark_line()\n    .encode(\n        x=\"date:T\",\n        y=alt.Y(\"trend:Q\", scale=alt.Scale(domain=[390, 430]), title=\"CO2 (ppm)\"),\n        tooltip=[\"date:T\", \"trend:Q\"],\n    )\n    .properties(width=\"container\", height=200)\n    .configure_view(strokeWidth=0)\n    .configure_axis(grid=False, labelFontSize=14, titleFontSize=14)\n    .configure_title(fontSize=16, anchor=\"start\", color=\"gray\")\n    .display()\n)"
  },
  {
    "objectID": "notebooks/quarto.html",
    "href": "notebooks/quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "This page contains a few examples of how to do things in Quarto’s world.\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\ntable = [\n    [\"Sun\", 696000, 1989100000],\n    [\"Earth\", 6371, 5973.6],\n    [\"Moon\", 1737, 73.5],\n    [\"Mars\", 3390, 641.85],\n]\nMarkdown(tabulate(table, headers=[\"Planet\", \"R (km)\", \"mass (x 10^29 kg)\"]))\n\n\n\nTable 1: Planets\n\n\nPlanet\nR (km)\nmass (x 10^29 kg)\n\n\n\n\nSun\n696000\n1.9891e+09\n\n\nEarth\n6371\n5973.6\n\n\nMoon\n1737\n73.5\n\n\nMars\n3390\n641.85\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 23, 2, 4])\nplt.show()\n\nplt.plot([8, 65, 23, 90])\nplt.show()\n\n\n\n\n\n\n\n(a) First\n\n\n\n\n\n\n\n(b) Second\n\n\n\n\nFigure 1: Charts"
  },
  {
    "objectID": "notebooks/quarto.html#intro",
    "href": "notebooks/quarto.html#intro",
    "title": "Quarto",
    "section": "",
    "text": "This page contains a few examples of how to do things in Quarto’s world.\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\ntable = [\n    [\"Sun\", 696000, 1989100000],\n    [\"Earth\", 6371, 5973.6],\n    [\"Moon\", 1737, 73.5],\n    [\"Mars\", 3390, 641.85],\n]\nMarkdown(tabulate(table, headers=[\"Planet\", \"R (km)\", \"mass (x 10^29 kg)\"]))\n\n\n\nTable 1: Planets\n\n\nPlanet\nR (km)\nmass (x 10^29 kg)\n\n\n\n\nSun\n696000\n1.9891e+09\n\n\nEarth\n6371\n5973.6\n\n\nMoon\n1737\n73.5\n\n\nMars\n3390\n641.85\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 23, 2, 4])\nplt.show()\n\nplt.plot([8, 65, 23, 90])\nplt.show()\n\n\n\n\n\n\n\n(a) First\n\n\n\n\n\n\n\n(b) Second\n\n\n\n\nFigure 1: Charts"
  },
  {
    "objectID": "notebooks/quarto.html#dynamic-graphs",
    "href": "notebooks/quarto.html#dynamic-graphs",
    "title": "Quarto",
    "section": "Dynamic Graphs",
    "text": "Dynamic Graphs\n\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\nsource = pd.DataFrame(\n    np.cumsum(np.random.randn(100, 3), 0).round(2),\n    columns=[\"A\", \"B\", \"C\"],\n    index=pd.RangeIndex(100, name=\"x\"),\n)\nsource = source.reset_index().melt(\"x\", var_name=\"category\", value_name=\"y\")\n\n# Create a selection that chooses the nearest point & selects based on x-value\nnearest = alt.selection_point(nearest=True, on=\"mouseover\", fields=[\"x\"], empty=False)\n\n# The basic line\nline = (\n    alt.Chart(source)\n    .mark_line(interpolate=\"basis\")\n    .encode(x=\"x:Q\", y=\"y:Q\", color=\"category:N\")\n)\n\n# Transparent selectors across the chart. This is what tells us\n# the x-value of the cursor\nselectors = (\n    alt.Chart(source)\n    .mark_point()\n    .encode(\n        x=\"x:Q\",\n        opacity=alt.value(0),\n    )\n    .add_params(nearest)\n)\n\n# Draw points on the line, and highlight based on selection\npoints = line.mark_point().encode(\n    opacity=alt.condition(nearest, alt.value(1), alt.value(0))\n)\n\n# Draw text labels near the points, and highlight based on selection\ntext = line.mark_text(align=\"left\", dx=5, dy=-5).encode(\n    text=alt.condition(nearest, \"y:Q\", alt.value(\" \"))\n)\n\n# Draw a rule at the location of the selection\nrules = (\n    alt.Chart(source)\n    .mark_rule(color=\"gray\")\n    .encode(\n        x=\"x:Q\",\n    )\n    .transform_filter(nearest)\n)\n\n# Put the five layers into a chart and bind the data\nalt.layer(line, selectors, points, rules, text).properties(\n    width=\"container\", height=300\n)\n\n\n\n\n\n\n\nYou can even embed a whole dataset and interact with it Tabelau style.\n\nimport pygwalker as pyg\n\npyg.walk(source)"
  }
]